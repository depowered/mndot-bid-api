import os
from pathlib import Path

import httpx
import pandas as pd


def scrape_contract_ids(year: int) -> list[int]:
    # Form data is copied from the request produced by naviating to the page in Firefox
    form_data = {
        "__EVENTTARGET": "ctl00$MainContent$drpPage",
        "__EVENTARGUMENT": "",
        "__LASTFOCUS": "",
        "__VIEWSTATE": "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",
        "__VIEWSTATEGENERATOR": "CB5059B5",
        "__EVENTVALIDATION": "/wEdADMLXo3F2faXsOGeuv09ClXc1/kROgTaTEDUErshDOtcHsyahhkwrDiNSR++FA7PlkqrxiY7QpuAA0OZi5lL4D3HxyQFCASK8RL+UbY3E2huli7thzHE0E+j4yeu77j/cuL1n0g50y16EsAZSTp7rZXggH3IdvgebgHqnzCd+WU2pynFb50RHNSrVqyu2ST6xTCG8IZA1ahlk47c9FgkHzNbEL59W7ZqYE8U2ePf6olvaAeVtBLODmauDKINQnW7c5tV0zY4jUnhryOqr+apHg8hJRu6LOyf+UeSMQw/EhfZRUljmd4fSoH1eBbZ0CjKnE7mOz+/lPv+EWwh9pj8F5ZXaxgKOWOmbq4SCnq1X6CUuD6AuliYjpV4mNSVLwd0n2KyAJU6vYTziL761x/HTmc5j/QHhDdvTy3ZoO1/EXMAsdnbHBFk0f2EbttD2TnES86pG7q2mKjsERLDsCYpqqxN1vdH8ym3PGMu2hmHo8f/tdcgRgyTFOMcnZcKOvPsHLVKC42600LLjeeBPnuKADujLIo8wL9TTHd/THXQiJq60+CaXPUyW09NH+9S9MOh4o540tkdgjqis0M1tLOVOym8DaHZ8gEVxTzJr3X1p4OE3Be/9kD2iCCVTuGvGcW5jG/FKTvkV5+oKcynlU5WQ0QiIUWCkCLy7JkXyH/4tHPRZS+bnZqXIJYeux5wYaaxrQ/eplvbf2806cD5YqKnhe5Y71y9V5OGW87MAmQ45THVFjXcHZ7bqZZ000xarGq/cBpfk4xjRhYgJk4hi2nMAs4h1pKnERbmkgS+bWo7wiVYh1DFVqp+ddfQiXmW3t5zM9iX/Vwpweak8XUO6c8Gm1g0Z1mvoIp6Cg5eWMJtUMJbRtMDzcbVpLt2PLdQu8DBbQFun4egZG2D+1v4sv8J6q+i3HWMLyu9HsT37j7GsYedCYG7XtnAPoBU7Ph9dbk4T+fG0L/Fmv5bwniDphcKb4Qa93mbfe0HYtgZKZ1Wn+vFymdKYJh/UM4528/U5j+bkfN/bMt2PWNJU54kfSEUqd9PgJaUva7hBAir75v1Oj18e5KTUKA9s0nX4oPKhnIxLnnazsJXk2ZsylPWwUux+fGbchLb0JlG8YBXRfhzx3eKmA==",
        "ctl00$MainContent$rdAbstractSearch": "0",
        "ctl00$MainContent$drpLettingYear": year,
        "ctl00$MainContent$drpLettingMonth": "0",
        "ctl00$MainContent$drpPage": "20000",
    }
    url = "https://transport.dot.state.mn.us/PostLetting/Abstract.aspx"
    r = httpx.post(url, data=form_data)
    r.raise_for_status()  # Raises an HTTPStatusError if unsucessfull

    dfs = pd.read_html(
        r.text, flavor="bs4"
    )  # Parse the tables (2) in the DOM into DataFrames
    df = dfs[1]  # The second table has desired content
    df = df[
        :-1
    ]  # Drop last row which is always the text "Total number of record(s) found = n"

    return df["Contract Id"].astype(int).to_list()


def download_abstract_csv(contract_id: int, file_path: Path) -> None:
    try:
        url = f"https://transport.dot.state.mn.us/PostLetting/abstractCSV.aspx?ContractId={contract_id}"
        r = httpx.get(url)
        r.raise_for_status()  # Raises an HTTPStatusError if unsucessfull
    except httpx.HTTPStatusError as err:
        raise err

    # Write csv to filesystem
    with open(file_path, "w") as f:
        f.write(r.text)


def get_abstract_csv_path(contract_id: int) -> Path:
    # Get CSV Directory environment variable and verify that it exists
    csv_dir = Path(os.getenv("CSV_DIR"))
    if not csv_dir.exists() and not csv_dir.is_dir():
        raise FileNotFoundError(f"CSV Directory does not exist at: {csv_dir}")

    # Return early if abstract csv already exists
    file_path = csv_dir / f"{contract_id}.csv"
    if file_path.exists():
        return file_path

    # Download CSV
    try:
        download_abstract_csv(contract_id, file_path)
    except httpx.HTTPStatusError as err:
        raise err

    return file_path
